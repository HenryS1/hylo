* Hylo

An extensible foundation for monads in Common Lisp.

** Why does Lisp need Monads?

Monads provide a uniform interface to error handling and control flow
for a variety of different computations. 

Error handling, missing values, asynchronous computation, parsing and
more can all be modelled with monads.

** Comprehensions

Hylo expects that a candidate monad implement fmap and flatmap
and using those implementations provides a do syntax similar to do
comprehensions in Haskell and for comprehensions in Scala.

In Haskell a monad comprehension looks like this:

#+begin_src haskell
  do 
    a <- [1,2,3]
    b <- [4,5]
    return (a + b)
#+end_src

The same pattern is expressed in hylo with

#+begin_src lisp
  (mdo (<- a '(1 2 3))
       (<- b '(4 5))
       (yield (+ a b)))
#+end_src

The `mdo` macro desugars to nested applications of `fmap` and
`flatmap` which are generic functions that need to be present on your
type for hylo to use it in a comprehension.

** Builtin implementations

Hylo comes with builtin monad implementations for Maybe, Try, List and
Vector.

** Etymology

The name hylo comes from hylomorphism, the fancy name for flatmap
which is the essential monadic operation.
